generator client {
    provider = "cargo prisma"
    output   = "../src/prisma.rs"
}

datasource db {
    provider = "mysql"
    url      = env("DB_URL")
}

model App {
    id             String          @id
    name           String
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    subApps        SubApp[]
    channel_params ChannelParams[]
    orders         Order[]
}

model SubApp {
    id             String          @id
    appId          String
    app            App             @relation(fields: [appId], references: [id], onDelete: Cascade)
    name           String
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    channel_params ChannelParams[]
    orders         Order[]
}

model ChannelParams {
    id        Int      @id @default(autoincrement())
    appId     String?
    app       App?     @relation(fields: [appId], references: [id], onDelete: Cascade)
    subAppId  String?
    subApp    SubApp?  @relation(fields: [subAppId], references: [id], onDelete: Cascade)
    channel   String
    params    Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([appId, subAppId, channel])
}

model Order {
    id       String @id
    appId    String
    app      App    @relation(fields: [appId], references: [id], onDelete: Cascade)
    subAppId String
    subApp   SubApp @relation(fields: [subAppId], references: [id], onDelete: Cascade)
    uid      String

    merchant_order_no String
    status            String
    paid              Boolean
    refunded          Boolean
    amount            Int
    amount_paid       Int
    amount_refunded   Int
    client_ip         String
    subject           String
    body              String
    currency          String

    time_paid   Int?
    time_expire Int
    metadata    Json
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    charges     Charge[]
    refunds     Refund[]
}

model Charge {
    id      String @id
    orderId String
    order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    channel String

    merchant_order_no String
    paid              Boolean
    amount            Int
    client_ip         String
    subject           String
    body              String
    currency          String

    extra        Json // 渠道发起支付所需的额外信息和支付成功后渠道返回的额外信息
    credential   Json // 前端调起支付所需的参数
    failure_code String?
    failure_msg  String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    refunds   Refund[]
}

model Refund {
    id       String @id
    chargeId String
    charge   Charge @relation(fields: [chargeId], references: [id], onDelete: Cascade)
    orderId  String
    order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    merchant_order_no String
    status            String
    amount            Int
    description       String

    extra        Json // 渠道发起退款所需的额外信息和退款成功后渠道返回的额外信息
    failure_code String?
    failure_msg  String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChargeNotifyHistory {
    id        Int      @id @default(autoincrement())
    chargeId  String
    refundId  String?
    data      String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([chargeId])
}
