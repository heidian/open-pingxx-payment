generator client {
    provider = "cargo prisma"
    output   = "../src/prisma.rs"
}

datasource db {
    provider = "mysql"
    url      = env("DB_URL")
}

model App {
    id             String             @id
    name           String
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
    subApps        SubApp[]
    channelParams  ChannelParams[]
    orders         Order[]
    charges        Charge[]
    refunds        Refund[]
    webhookConfigs AppWebhookConfig[]
}

model SubApp {
    id            String          @id
    appId         String
    app           App             @relation(fields: [appId], references: [id], onDelete: Cascade)
    name          String
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    channelParams ChannelParams[]
    orders        Order[]
}

model ChannelParams {
    id        Int      @id @default(autoincrement())
    appId     String?
    app       App?     @relation(fields: [appId], references: [id], onDelete: Cascade)
    subAppId  String?
    subApp    SubApp?  @relation(fields: [subAppId], references: [id], onDelete: Cascade)
    channel   String
    params    Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([appId, subAppId, channel])
}

model Order {
    id       String @id
    appId    String
    app      App    @relation(fields: [appId], references: [id], onDelete: Cascade)
    subAppId String
    subApp   SubApp @relation(fields: [subAppId], references: [id], onDelete: Cascade)

    uid             String
    merchantOrderNo String
    status          String
    paid            Boolean
    refunded        Boolean
    amount          Int
    amountPaid      Int
    amountRefunded  Int
    clientIp        String
    subject         String
    body            String
    currency        String

    timePaid   Int?
    timeExpire Int
    metadata   Json
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    charges    Charge[]
    refunds    Refund[]
}

model Charge {
    id      String  @id
    appId   String
    app     App     @relation(fields: [appId], references: [id], onDelete: Cascade)
    orderId String?
    order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    channel String

    merchantOrderNo String
    paid            Boolean
    amount          Int
    clientIp        String
    subject         String
    body            String
    currency        String

    extra       Json // 渠道发起支付所需的额外信息和支付成功后渠道返回的额外信息
    credential  Json // 前端调起支付所需的参数
    timePaid    Int?
    timeExpire  Int
    failureCode String?
    failureMsg  String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    refunds   Refund[]
}

model Refund {
    id       String  @id
    appId    String
    app      App     @relation(fields: [appId], references: [id], onDelete: Cascade)
    chargeId String
    charge   Charge  @relation(fields: [chargeId], references: [id], onDelete: Cascade)
    orderId  String?
    order    Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    merchantOrderNo String
    status          String
    amount          Int
    description     String

    extra       Json // 渠道发起退款所需的额外信息和退款成功后渠道返回的额外信息
    timeSucceed Int?
    failureCode String?
    failureMsg  String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChargeNotifyHistory {
    id        Int      @id @default(autoincrement())
    chargeId  String
    refundId  String?
    data      String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([chargeId])
}

model AppWebhookConfig {
    id        Int      @id @default(autoincrement())
    appId     String
    app       App      @relation(fields: [appId], references: [id], onDelete: Cascade)
    endpoint  String
    events    Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([appId, endpoint])
}

model AppWebhookHistory {
    id          String   @id
    appId       String
    endpoint    String
    event       String
    payload     Json
    status_code Int
    response    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
